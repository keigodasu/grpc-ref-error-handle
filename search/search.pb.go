// Code generated by protoc-gen-go. DO NOT EDIT.
// source: search.proto

/*
Package search is a generated protocol buffer package.

It is generated from these files:
	search.proto

It has these top-level messages:
	SearchResponse
	SearchRequest
	StructuredQuery
*/
package search

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type StructuredQuery_CompositeFilter_Operator int32

const (
	StructuredQuery_CompositeFilter_AND StructuredQuery_CompositeFilter_Operator = 0
	StructuredQuery_CompositeFilter_OR  StructuredQuery_CompositeFilter_Operator = 1
	StructuredQuery_CompositeFilter_NOT StructuredQuery_CompositeFilter_Operator = 2
)

var StructuredQuery_CompositeFilter_Operator_name = map[int32]string{
	0: "AND",
	1: "OR",
	2: "NOT",
}
var StructuredQuery_CompositeFilter_Operator_value = map[string]int32{
	"AND": 0,
	"OR":  1,
	"NOT": 2,
}

func (x StructuredQuery_CompositeFilter_Operator) String() string {
	return proto.EnumName(StructuredQuery_CompositeFilter_Operator_name, int32(x))
}
func (StructuredQuery_CompositeFilter_Operator) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{2, 1, 0}
}

type StructuredQuery_FieldFilter_Operator int32

const (
	StructuredQuery_FieldFilter_LESS_THAN             StructuredQuery_FieldFilter_Operator = 0
	StructuredQuery_FieldFilter_LESS_THAN_OR_EQUAL    StructuredQuery_FieldFilter_Operator = 1
	StructuredQuery_FieldFilter_GREATER_THAN          StructuredQuery_FieldFilter_Operator = 2
	StructuredQuery_FieldFilter_GREATER_THAN_OR_EQUAL StructuredQuery_FieldFilter_Operator = 43
	StructuredQuery_FieldFilter_EQUAL                 StructuredQuery_FieldFilter_Operator = 4
)

var StructuredQuery_FieldFilter_Operator_name = map[int32]string{
	0:  "LESS_THAN",
	1:  "LESS_THAN_OR_EQUAL",
	2:  "GREATER_THAN",
	43: "GREATER_THAN_OR_EQUAL",
	4:  "EQUAL",
}
var StructuredQuery_FieldFilter_Operator_value = map[string]int32{
	"LESS_THAN":             0,
	"LESS_THAN_OR_EQUAL":    1,
	"GREATER_THAN":          2,
	"GREATER_THAN_OR_EQUAL": 43,
	"EQUAL":                 4,
}

func (x StructuredQuery_FieldFilter_Operator) String() string {
	return proto.EnumName(StructuredQuery_FieldFilter_Operator_name, int32(x))
}
func (StructuredQuery_FieldFilter_Operator) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{2, 2, 0}
}

type SearchResponse struct {
}

func (m *SearchResponse) Reset()                    { *m = SearchResponse{} }
func (m *SearchResponse) String() string            { return proto.CompactTextString(m) }
func (*SearchResponse) ProtoMessage()               {}
func (*SearchResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type SearchRequest struct {
	// Types that are valid to be assigned to Query:
	//	*SearchRequest_StructuredQuery
	Query isSearchRequest_Query `protobuf_oneof:"query"`
}

func (m *SearchRequest) Reset()                    { *m = SearchRequest{} }
func (m *SearchRequest) String() string            { return proto.CompactTextString(m) }
func (*SearchRequest) ProtoMessage()               {}
func (*SearchRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type isSearchRequest_Query interface {
	isSearchRequest_Query()
}

type SearchRequest_StructuredQuery struct {
	StructuredQuery *StructuredQuery `protobuf:"bytes,1,opt,name=structured_query,json=structuredQuery,oneof"`
}

func (*SearchRequest_StructuredQuery) isSearchRequest_Query() {}

func (m *SearchRequest) GetQuery() isSearchRequest_Query {
	if m != nil {
		return m.Query
	}
	return nil
}

func (m *SearchRequest) GetStructuredQuery() *StructuredQuery {
	if x, ok := m.GetQuery().(*SearchRequest_StructuredQuery); ok {
		return x.StructuredQuery
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*SearchRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _SearchRequest_OneofMarshaler, _SearchRequest_OneofUnmarshaler, _SearchRequest_OneofSizer, []interface{}{
		(*SearchRequest_StructuredQuery)(nil),
	}
}

func _SearchRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*SearchRequest)
	// query
	switch x := m.Query.(type) {
	case *SearchRequest_StructuredQuery:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.StructuredQuery); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("SearchRequest.Query has unexpected type %T", x)
	}
	return nil
}

func _SearchRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*SearchRequest)
	switch tag {
	case 1: // query.structured_query
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(StructuredQuery)
		err := b.DecodeMessage(msg)
		m.Query = &SearchRequest_StructuredQuery{msg}
		return true, err
	default:
		return false, nil
	}
}

func _SearchRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*SearchRequest)
	// query
	switch x := m.Query.(type) {
	case *SearchRequest_StructuredQuery:
		s := proto.Size(x.StructuredQuery)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type StructuredQuery struct {
	Where *StructuredQuery_Filter `protobuf:"bytes,1,opt,name=where" json:"where,omitempty"`
}

func (m *StructuredQuery) Reset()                    { *m = StructuredQuery{} }
func (m *StructuredQuery) String() string            { return proto.CompactTextString(m) }
func (*StructuredQuery) ProtoMessage()               {}
func (*StructuredQuery) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *StructuredQuery) GetWhere() *StructuredQuery_Filter {
	if m != nil {
		return m.Where
	}
	return nil
}

type StructuredQuery_Filter struct {
	// Types that are valid to be assigned to FilterType:
	//	*StructuredQuery_Filter_CompositeFilter
	//	*StructuredQuery_Filter_FieldFilter
	FilterType isStructuredQuery_Filter_FilterType `protobuf_oneof:"filter_type"`
}

func (m *StructuredQuery_Filter) Reset()                    { *m = StructuredQuery_Filter{} }
func (m *StructuredQuery_Filter) String() string            { return proto.CompactTextString(m) }
func (*StructuredQuery_Filter) ProtoMessage()               {}
func (*StructuredQuery_Filter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2, 0} }

type isStructuredQuery_Filter_FilterType interface {
	isStructuredQuery_Filter_FilterType()
}

type StructuredQuery_Filter_CompositeFilter struct {
	CompositeFilter *StructuredQuery_CompositeFilter `protobuf:"bytes,1,opt,name=composite_filter,json=compositeFilter,oneof"`
}
type StructuredQuery_Filter_FieldFilter struct {
	FieldFilter *StructuredQuery_FieldFilter `protobuf:"bytes,2,opt,name=field_filter,json=fieldFilter,oneof"`
}

func (*StructuredQuery_Filter_CompositeFilter) isStructuredQuery_Filter_FilterType() {}
func (*StructuredQuery_Filter_FieldFilter) isStructuredQuery_Filter_FilterType()     {}

func (m *StructuredQuery_Filter) GetFilterType() isStructuredQuery_Filter_FilterType {
	if m != nil {
		return m.FilterType
	}
	return nil
}

func (m *StructuredQuery_Filter) GetCompositeFilter() *StructuredQuery_CompositeFilter {
	if x, ok := m.GetFilterType().(*StructuredQuery_Filter_CompositeFilter); ok {
		return x.CompositeFilter
	}
	return nil
}

func (m *StructuredQuery_Filter) GetFieldFilter() *StructuredQuery_FieldFilter {
	if x, ok := m.GetFilterType().(*StructuredQuery_Filter_FieldFilter); ok {
		return x.FieldFilter
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*StructuredQuery_Filter) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _StructuredQuery_Filter_OneofMarshaler, _StructuredQuery_Filter_OneofUnmarshaler, _StructuredQuery_Filter_OneofSizer, []interface{}{
		(*StructuredQuery_Filter_CompositeFilter)(nil),
		(*StructuredQuery_Filter_FieldFilter)(nil),
	}
}

func _StructuredQuery_Filter_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*StructuredQuery_Filter)
	// filter_type
	switch x := m.FilterType.(type) {
	case *StructuredQuery_Filter_CompositeFilter:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CompositeFilter); err != nil {
			return err
		}
	case *StructuredQuery_Filter_FieldFilter:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.FieldFilter); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("StructuredQuery_Filter.FilterType has unexpected type %T", x)
	}
	return nil
}

func _StructuredQuery_Filter_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*StructuredQuery_Filter)
	switch tag {
	case 1: // filter_type.composite_filter
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(StructuredQuery_CompositeFilter)
		err := b.DecodeMessage(msg)
		m.FilterType = &StructuredQuery_Filter_CompositeFilter{msg}
		return true, err
	case 2: // filter_type.field_filter
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(StructuredQuery_FieldFilter)
		err := b.DecodeMessage(msg)
		m.FilterType = &StructuredQuery_Filter_FieldFilter{msg}
		return true, err
	default:
		return false, nil
	}
}

func _StructuredQuery_Filter_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*StructuredQuery_Filter)
	// filter_type
	switch x := m.FilterType.(type) {
	case *StructuredQuery_Filter_CompositeFilter:
		s := proto.Size(x.CompositeFilter)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *StructuredQuery_Filter_FieldFilter:
		s := proto.Size(x.FieldFilter)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type StructuredQuery_CompositeFilter struct {
	Op      StructuredQuery_CompositeFilter_Operator `protobuf:"varint,1,opt,name=op,enum=search.StructuredQuery_CompositeFilter_Operator" json:"op,omitempty"`
	Filters []*StructuredQuery_Filter                `protobuf:"bytes,2,rep,name=filters" json:"filters,omitempty"`
}

func (m *StructuredQuery_CompositeFilter) Reset()         { *m = StructuredQuery_CompositeFilter{} }
func (m *StructuredQuery_CompositeFilter) String() string { return proto.CompactTextString(m) }
func (*StructuredQuery_CompositeFilter) ProtoMessage()    {}
func (*StructuredQuery_CompositeFilter) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{2, 1}
}

func (m *StructuredQuery_CompositeFilter) GetOp() StructuredQuery_CompositeFilter_Operator {
	if m != nil {
		return m.Op
	}
	return StructuredQuery_CompositeFilter_AND
}

func (m *StructuredQuery_CompositeFilter) GetFilters() []*StructuredQuery_Filter {
	if m != nil {
		return m.Filters
	}
	return nil
}

type StructuredQuery_FieldFilter struct {
	Field   *StructuredQuery_FieldReference      `protobuf:"bytes,1,opt,name=field" json:"field,omitempty"`
	Op      StructuredQuery_FieldFilter_Operator `protobuf:"varint,2,opt,name=op,enum=search.StructuredQuery_FieldFilter_Operator" json:"op,omitempty"`
	Keyword string                               `protobuf:"bytes,3,opt,name=keyword" json:"keyword,omitempty"`
}

func (m *StructuredQuery_FieldFilter) Reset()                    { *m = StructuredQuery_FieldFilter{} }
func (m *StructuredQuery_FieldFilter) String() string            { return proto.CompactTextString(m) }
func (*StructuredQuery_FieldFilter) ProtoMessage()               {}
func (*StructuredQuery_FieldFilter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2, 2} }

func (m *StructuredQuery_FieldFilter) GetField() *StructuredQuery_FieldReference {
	if m != nil {
		return m.Field
	}
	return nil
}

func (m *StructuredQuery_FieldFilter) GetOp() StructuredQuery_FieldFilter_Operator {
	if m != nil {
		return m.Op
	}
	return StructuredQuery_FieldFilter_LESS_THAN
}

func (m *StructuredQuery_FieldFilter) GetKeyword() string {
	if m != nil {
		return m.Keyword
	}
	return ""
}

type StructuredQuery_FieldReference struct {
	FieldPath string `protobuf:"bytes,1,opt,name=field_path,json=fieldPath" json:"field_path,omitempty"`
}

func (m *StructuredQuery_FieldReference) Reset()         { *m = StructuredQuery_FieldReference{} }
func (m *StructuredQuery_FieldReference) String() string { return proto.CompactTextString(m) }
func (*StructuredQuery_FieldReference) ProtoMessage()    {}
func (*StructuredQuery_FieldReference) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{2, 3}
}

func (m *StructuredQuery_FieldReference) GetFieldPath() string {
	if m != nil {
		return m.FieldPath
	}
	return ""
}

func init() {
	proto.RegisterType((*SearchResponse)(nil), "search.SearchResponse")
	proto.RegisterType((*SearchRequest)(nil), "search.SearchRequest")
	proto.RegisterType((*StructuredQuery)(nil), "search.StructuredQuery")
	proto.RegisterType((*StructuredQuery_Filter)(nil), "search.StructuredQuery.Filter")
	proto.RegisterType((*StructuredQuery_CompositeFilter)(nil), "search.StructuredQuery.CompositeFilter")
	proto.RegisterType((*StructuredQuery_FieldFilter)(nil), "search.StructuredQuery.FieldFilter")
	proto.RegisterType((*StructuredQuery_FieldReference)(nil), "search.StructuredQuery.FieldReference")
	proto.RegisterEnum("search.StructuredQuery_CompositeFilter_Operator", StructuredQuery_CompositeFilter_Operator_name, StructuredQuery_CompositeFilter_Operator_value)
	proto.RegisterEnum("search.StructuredQuery_FieldFilter_Operator", StructuredQuery_FieldFilter_Operator_name, StructuredQuery_FieldFilter_Operator_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for SearchService service

type SearchServiceClient interface {
	Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error)
}

type searchServiceClient struct {
	cc *grpc.ClientConn
}

func NewSearchServiceClient(cc *grpc.ClientConn) SearchServiceClient {
	return &searchServiceClient{cc}
}

func (c *searchServiceClient) Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error) {
	out := new(SearchResponse)
	err := grpc.Invoke(ctx, "/search.SearchService/Search", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SearchService service

type SearchServiceServer interface {
	Search(context.Context, *SearchRequest) (*SearchResponse, error)
}

func RegisterSearchServiceServer(s *grpc.Server, srv SearchServiceServer) {
	s.RegisterService(&_SearchService_serviceDesc, srv)
}

func _SearchService_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServiceServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/search.SearchService/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServiceServer).Search(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SearchService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "search.SearchService",
	HandlerType: (*SearchServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Search",
			Handler:    _SearchService_Search_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "search.proto",
}

func init() { proto.RegisterFile("search.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 471 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x93, 0xdf, 0x8e, 0xd2, 0x40,
	0x14, 0xc6, 0x69, 0xb1, 0xc5, 0x1e, 0xfe, 0x4d, 0x4e, 0xb2, 0x2b, 0x36, 0xd1, 0x90, 0x6a, 0x74,
	0x13, 0x0d, 0x1a, 0x34, 0xd1, 0x8b, 0xbd, 0x90, 0x75, 0x51, 0x2e, 0x36, 0xe0, 0x4e, 0xf1, 0xd6,
	0x06, 0xcb, 0x21, 0x34, 0xe2, 0x4e, 0x77, 0x3a, 0xb8, 0xe1, 0x25, 0x7c, 0x19, 0x2f, 0x7c, 0x36,
	0xef, 0x0c, 0x33, 0x94, 0x05, 0x12, 0x36, 0xdc, 0xf5, 0x7c, 0x73, 0xe6, 0x37, 0xe7, 0xfb, 0xd2,
	0x03, 0x95, 0x8c, 0x46, 0x32, 0x9e, 0xb6, 0x52, 0x29, 0x94, 0x40, 0xd7, 0x54, 0x01, 0x83, 0x5a,
	0xa8, 0xbf, 0x38, 0x65, 0xa9, 0xb8, 0xca, 0x28, 0xf8, 0x06, 0xd5, 0x5c, 0xb9, 0x9e, 0x53, 0xa6,
	0xf0, 0x1c, 0x58, 0xa6, 0xe4, 0x3c, 0x56, 0x73, 0x49, 0xe3, 0xe8, 0x7a, 0x4e, 0x72, 0xd1, 0xb0,
	0x9a, 0xd6, 0x49, 0xb9, 0xfd, 0xa0, 0xb5, 0x62, 0x86, 0xeb, 0xf3, 0xcb, 0xe5, 0x71, 0xaf, 0xc0,
	0xeb, 0xd9, 0xb6, 0x74, 0x56, 0x02, 0x47, 0x5f, 0x0d, 0xfe, 0x39, 0x50, 0xdf, 0xe9, 0xc7, 0xb7,
	0xe0, 0xdc, 0x4c, 0x49, 0xd2, 0x8a, 0xfb, 0x78, 0x0f, 0xb7, 0xf5, 0x29, 0x99, 0x29, 0x92, 0xdc,
	0x34, 0xfb, 0x7f, 0x2d, 0x70, 0x8d, 0x82, 0x43, 0x60, 0xb1, 0xf8, 0x99, 0x8a, 0x2c, 0x51, 0x14,
	0x4d, 0xb4, 0xb6, 0x62, 0x3d, 0xdf, 0xc7, 0xfa, 0x98, 0xf7, 0x1b, 0xc4, 0x72, 0xe6, 0x78, 0x5b,
	0xc2, 0x1e, 0x54, 0x26, 0x09, 0xcd, 0xc6, 0x39, 0xd1, 0xd6, 0xc4, 0x27, 0xfb, 0xa7, 0xa3, 0xd9,
	0x78, 0x4d, 0x2b, 0x4f, 0x6e, 0xcb, 0xb3, 0x2a, 0x94, 0x0d, 0x23, 0x52, 0x8b, 0x94, 0xfc, 0x3f,
	0x16, 0xd4, 0x77, 0xde, 0xc7, 0x0f, 0x60, 0x8b, 0x54, 0x0f, 0x5d, 0x6b, 0xbf, 0x3e, 0x70, 0xe8,
	0xd6, 0x20, 0x25, 0x39, 0x52, 0x42, 0x72, 0x5b, 0xa4, 0xf8, 0x1e, 0x4a, 0xe6, 0x91, 0xac, 0x61,
	0x37, 0x8b, 0x07, 0xe4, 0x98, 0xb7, 0x07, 0x4f, 0xe1, 0x7e, 0x4e, 0xc2, 0x12, 0x14, 0x3b, 0xfd,
	0x73, 0x56, 0x40, 0x17, 0xec, 0x01, 0x67, 0xd6, 0x52, 0xe8, 0x0f, 0x86, 0xcc, 0xf6, 0x7f, 0xdb,
	0x50, 0xde, 0xf0, 0x88, 0xa7, 0xe0, 0x68, 0x8f, 0xab, 0xa4, 0x9f, 0xdd, 0x99, 0x0b, 0xa7, 0x09,
	0x49, 0xba, 0x8a, 0x89, 0x9b, 0x4b, 0x78, 0xaa, 0xfd, 0xda, 0xda, 0xef, 0xcb, 0x03, 0x22, 0xdd,
	0xf6, 0xda, 0x80, 0xd2, 0x0f, 0x5a, 0xdc, 0x08, 0x39, 0x6e, 0x14, 0x9b, 0xd6, 0x89, 0xc7, 0xf3,
	0x32, 0x48, 0x36, 0xbc, 0x54, 0xc1, 0xbb, 0xe8, 0x86, 0x61, 0x34, 0xec, 0x75, 0xfa, 0xac, 0x80,
	0xc7, 0x80, 0xeb, 0x32, 0x1a, 0xf0, 0xa8, 0x7b, 0xf9, 0xb5, 0x73, 0xc1, 0x2c, 0x64, 0x50, 0xf9,
	0xcc, 0xbb, 0x9d, 0x61, 0x97, 0x9b, 0x4e, 0x1b, 0x1f, 0xc2, 0xd1, 0xa6, 0x72, 0xdb, 0xfc, 0x02,
	0x3d, 0x70, 0xcc, 0xe7, 0x3d, 0xff, 0x15, 0xd4, 0xb6, 0xbd, 0xe1, 0x23, 0x00, 0xf3, 0xc7, 0xa4,
	0x23, 0x35, 0xd5, 0xb9, 0x78, 0xdc, 0xd3, 0xca, 0x97, 0x91, 0x9a, 0xb6, 0x7b, 0xf9, 0x6e, 0x85,
	0x24, 0x7f, 0x25, 0x31, 0xe1, 0x3b, 0x70, 0x8d, 0x80, 0x47, 0xeb, 0x08, 0x36, 0x97, 0xcf, 0x3f,
	0xde, 0x95, 0xcd, 0x96, 0x7e, 0x77, 0xf5, 0x1a, 0xbf, 0xf9, 0x1f, 0x00, 0x00, 0xff, 0xff, 0xe3,
	0x40, 0xb0, 0xa0, 0xd6, 0x03, 0x00, 0x00,
}
